serialComm
==========

Serial communications protocol used with the Serial-JTAG adapter.
It is a frame/packet based protocol. Each frame as to be acknowledged
by the other side. The commnuication is ecured throug a CRC checksum.

part of serJTAGfirmware
http://mspgcc.sf.net
chris <cliechti@gmx.net>

Frame Format
------------
    Type
    |   Size of data block
    |   |     Data
    |   |     |    Checksum ofer header and date (CRC)
    |   |     |    |   
    V   V     V    V   
  +---+---+------+---+
  | t | s | data | c |
  +---+---+------+---+
    0   1  2...N  N+1

Synchronization is done with Timeout/Idele line detection.
After each frame an idle time of 30ms is required. Within a frame delays
from byte to byte must not be as long as the timout value.


Frame Types
-----------

Name         ID   Direction    Description
_____________________________________________________________________________
ACK         0x00  PC <-> BOX   Acknowledege for a message
NACK        0xff  PC <-> BOX   Not-Acknowledege. Message generated an error

T_CONNECT   0x01  PC --> BOX   Connect to target, this stops it
T_RELEASE   0x02  PC --> BOX   Release JTAG connection, target continues
T_RESET     0x03  PC --> BOX   Reset target, release JTAG
T_PUC       0x04  PC --> BOX   Perform a PUC on target, keep conection
T_EXEC      0x05  PC --> BOX   Start target execution at address, release JTAG
T_MCLK      0x06  PC --> BOX   Provide MCLKs to single step target

T_MEMREAD   0x11  PC --> BOX   Request memory range from target
T_MEMDATA   0x12  PC <-- BOX   Answer to MEMREAD from target
T_MEMWRITE  0x13  PC --> BOX   Write data to specified address to target
T_MEMERASE  0x14  PC --> BOX   Erase Flash segment on target containing the address

DEBUGTEXT   0xe0  PC <-- BOX   Debug messages from BOX
MEMREAD     0xe1  PC --> BOX   Request memory range from the BOX
MEMDATA     0xe2  PC <-- BOX   Answer to MEMREAD from the BOX
MEMWRITE    0xe3  PC --> BOX   Write data to specified address on the BOX
MEMERASE    0xe4  PC --> BOX   Erase Flash segment on the BOX containing the address


All other frame types are reserved for future extensions.


Detailed Description
--------------------
The format drawings only show the data part of a frame. The entire frame
format is described above.

_____________________________________________________________________________

Name:   ACK
ID:     0x00
Data:   0 Bytes

PC <-> BOX   Acknowledege for a message
_____________________________________________________________________________

Name:   NACK
ID:     0xff
Data:   0 Bytes

PC <-> BOX   Not-Acknowledege. Message generated an error
_____________________________________________________________________________

Name:   T_CONNECT
ID:     0x01
Data:   0 Bytes

PC --> BOX   Connect to target, this stops it
_____________________________________________________________________________

Name:   T_RELEASE
ID:     0x02
Data:   0 Bytes

PC --> BOX   Release JTAG connection, target continues
_____________________________________________________________________________

Name:   T_RESET
ID:     0x03
Data:   2 Bytes

PC --> BOX   Reset target, release JTAG
_____________________________________________________________________________

Name:   T_PUC
ID:     0x04
Data:   0 Bytes

PC --> BOX   Perform a PUC on target, keep conection
_____________________________________________________________________________

Name:   T_EXEC
ID:     0x05
Data:   2 Bytes

PC --> BOX   Start target execution at address, release JTAG

    start address
    V      
  +---+---+
  |  adr  |
  +---+---+
    0   1  
_____________________________________________________________________________

Name:   T_MCLK
ID:     0x06
Data:   4 Bytes

PC --> BOX   Provide MCLKs to single step target

    number of steps to perform
    V      
  +---+---+
  | numst |
  +---+---+
    0   1
_____________________________________________________________________________

Name:   T_MEMREAD
ID:     0x11
Data:   4 Bytes

PC --> BOX   Request memory read from target

    start address of memory block
    |       number of bytes to read
    V       V
  +---+---+---+---+
  |  adr  |  size |
  +---+---+---+---+
    0   1   2   3
_____________________________________________________________________________

Name:   T_MEMADTA
ID:     0x12
Data:   2+N Bytes

PC <-- BOX   Read memory answer from target

    start address of memory block
    |       data
    V       V
  +---+---+---+---+--..
  |  adr  | c0| c1|
  +---+---+---+---+--..
    0   1   2   3..N
_____________________________________________________________________________

Name:   T_MEMWRITE
ID:     0x13
Data:   2+N Bytes

PC --> BOX   Write memory block to target

    start address of memory block
    |       data
    V       V
  +---+---+---+---+--..
  |  adr  | c0| c1|
  +---+---+---+---+--..
    0   1   2   3..N
_____________________________________________________________________________

Name:   T_MEMERASE
ID:     0x14
Data:   2 Bytes

PC --> BOX   Erase Flash segment on target containing the address

    some address inside the flash block to be earased
    |         erase mode
    V         V
  +---+---+---+---+
  |  adr  | mode  |
  +---+---+---+---+
    0   1   2   3

erase modes:
ERASE_MASS      0xA506          recomended address 0xfffe
ERASE_MAIN      0xA504          recomended address 0xfffe
ERASE_SGMT      0xA502

_____________________________________________________________________________

Name:   DEBUGTEXT
ID:     0xe0
Data:   N Bytes

PC <-- BOX   Debug messages

string/ASCII data

  +---+---+--..
  | c0| c1|
  +---+---+--..
    0   1   2..N
_____________________________________________________________________________

Name:   MEMREAD
ID:     0xe1
Data:   4 Bytes

PC --> BOX   Request memory read

    start address of memory block
    |       number of bytes to read
    V       V
  +---+---+---+---+
  |  adr  |  size |
  +---+---+---+---+
    0   1   2   3
_____________________________________________________________________________

Name:   MEMADTA
ID:     0xe2
Data:   2+N Bytes

PC <-- BOX   Read memory answer

    start address of memory block
    |       data
    V       V
  +---+---+---+---+--..
  |  adr  | c0| c1|
  +---+---+---+---+--..
    0   1   2   3..N
_____________________________________________________________________________

Name:   MEMWRITE
ID:     0xe3
Data:   2+N Bytes

PC --> BOX   Write memory block

    start address of memory block
    |       data
    V       V
  +---+---+---+---+--..
  |  adr  | c0| c1|
  +---+---+---+---+--..
    0   1   2   3..N
_____________________________________________________________________________

Name:   MEMERASE
ID:     0xe4
Data:   2 Bytes

PC --> BOX   Erase Flash segment containing the address

    some address inside the flash block to be earased
    V
  +---+---+
  |  adr  |
  +---+---+
    0   1  
_____________________________________________________________________________


CRC calculation
---------------
The CRC value is updated for each byte in the message (including header).


Python code:
------------------------
#crc over a message:
#"message" is the array containg the message bytes without crc
    crc_calc = 0
    for b in message:
        crc_calc = crc(crc_calc, b)
    message.append(crc_calc)    #finally store CRC in message

#crc berechnung
#crc_calc - bisherige checksumme
#bt_to_crc - datenbyte welches in die checksumme hineingerechnet wird
#returnwert: neue checksumme
def crc(crc_calc, bt_to_crc ):
    """crc calclation for comm with box
    arg1: old checksum
    arg2: byte to add to the checksum
    return: new value of checksum"""
    al = bt_to_crc
    c = 0 #Boolean value
    bl = 0
    #für jedes bit im byte
    for bl in range(8,0,-1):
        al ^= crc_calc
        c = (al & 0x01) != 0
        al = crc_calc
        if c: al ^= 0x18
        al >>= 1
        if c: al |= 0x80
        crc_calc = al
        al = bt_to_crc
        al >>= 1
        bt_to_crc = al
    return crc_calc
------------------------

